package fr.restoflash.api.local.android.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERIALIZABLE_TRANSACTION".
*/
public class SerializableTransactionDao extends AbstractDao<SerializableTransaction, String> {

    public static final String TABLENAME = "SERIALIZABLE_TRANSACTION";

    /**
     * Properties of entity SerializableTransaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Is = new Property(1, String.class, "is", false, "IS");
        public final static Property TotalAmountCentimes = new Property(2, Integer.class, "totalAmountCentimes", false, "TOTAL_AMOUNT_CENTIMES");
        public final static Property Product = new Property(3, String.class, "product", false, "PRODUCT");
        public final static Property ProductAmountCentimes = new Property(4, Integer.class, "productAmountCentimes", false, "PRODUCT_AMOUNT_CENTIMES");
        public final static Property TopUpAmountCentimes = new Property(5, Integer.class, "topUpAmountCentimes", false, "TOP_UP_AMOUNT_CENTIMES");
        public final static Property LoginPos = new Property(6, String.class, "loginPos", false, "LOGIN_POS");
        public final static Property ScanTime = new Property(7, java.util.Date.class, "scanTime", false, "SCAN_TIME");
        public final static Property Reference = new Property(8, String.class, "reference", false, "REFERENCE");
        public final static Property Ben = new Property(9, String.class, "ben", false, "BEN");
        public final static Property Company = new Property(10, String.class, "company", false, "COMPANY");
        public final static Property BonusId = new Property(11, String.class, "bonusId", false, "BONUS_ID");
        public final static Property BonusName = new Property(12, String.class, "bonusName", false, "BONUS_NAME");
        public final static Property VouchersJson = new Property(13, String.class, "vouchersJson", false, "VOUCHERS_JSON");
    };


    public SerializableTransactionDao(DaoConfig config) {
        super(config);
    }
    
    public SerializableTransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERIALIZABLE_TRANSACTION\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"IS\" TEXT," + // 1: is
                "\"TOTAL_AMOUNT_CENTIMES\" INTEGER," + // 2: totalAmountCentimes
                "\"PRODUCT\" TEXT," + // 3: product
                "\"PRODUCT_AMOUNT_CENTIMES\" INTEGER," + // 4: productAmountCentimes
                "\"TOP_UP_AMOUNT_CENTIMES\" INTEGER," + // 5: topUpAmountCentimes
                "\"LOGIN_POS\" TEXT," + // 6: loginPos
                "\"SCAN_TIME\" INTEGER," + // 7: scanTime
                "\"REFERENCE\" TEXT," + // 8: reference
                "\"BEN\" TEXT," + // 9: ben
                "\"COMPANY\" TEXT," + // 10: company
                "\"BONUS_ID\" TEXT," + // 11: bonusId
                "\"BONUS_NAME\" TEXT," + // 12: bonusName
                "\"VOUCHERS_JSON\" TEXT);"); // 13: vouchersJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERIALIZABLE_TRANSACTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SerializableTransaction entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String is = entity.getIs();
        if (is != null) {
            stmt.bindString(2, is);
        }
 
        Integer totalAmountCentimes = entity.getTotalAmountCentimes();
        if (totalAmountCentimes != null) {
            stmt.bindLong(3, totalAmountCentimes);
        }
 
        String product = entity.getProduct();
        if (product != null) {
            stmt.bindString(4, product);
        }
 
        Integer productAmountCentimes = entity.getProductAmountCentimes();
        if (productAmountCentimes != null) {
            stmt.bindLong(5, productAmountCentimes);
        }
 
        Integer topUpAmountCentimes = entity.getTopUpAmountCentimes();
        if (topUpAmountCentimes != null) {
            stmt.bindLong(6, topUpAmountCentimes);
        }
 
        String loginPos = entity.getLoginPos();
        if (loginPos != null) {
            stmt.bindString(7, loginPos);
        }
 
        java.util.Date scanTime = entity.getScanTime();
        if (scanTime != null) {
            stmt.bindLong(8, scanTime.getTime());
        }
 
        String reference = entity.getReference();
        if (reference != null) {
            stmt.bindString(9, reference);
        }
 
        String ben = entity.getBen();
        if (ben != null) {
            stmt.bindString(10, ben);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(11, company);
        }
 
        String bonusId = entity.getBonusId();
        if (bonusId != null) {
            stmt.bindString(12, bonusId);
        }
 
        String bonusName = entity.getBonusName();
        if (bonusName != null) {
            stmt.bindString(13, bonusName);
        }
 
        String vouchersJson = entity.getVouchersJson();
        if (vouchersJson != null) {
            stmt.bindString(14, vouchersJson);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SerializableTransaction readEntity(Cursor cursor, int offset) {
        SerializableTransaction entity = new SerializableTransaction( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // is
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // totalAmountCentimes
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // product
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // productAmountCentimes
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // topUpAmountCentimes
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // loginPos
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // scanTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // reference
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ben
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // company
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // bonusId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bonusName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // vouchersJson
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SerializableTransaction entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setIs(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotalAmountCentimes(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setProduct(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductAmountCentimes(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTopUpAmountCentimes(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLoginPos(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setScanTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setReference(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBen(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompany(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBonusId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBonusName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVouchersJson(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SerializableTransaction entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SerializableTransaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
